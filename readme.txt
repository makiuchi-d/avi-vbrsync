VBR音声を同期するためのヘッダ書き換え人柱ツール


【準備するもの】
・AviUtl　・mp3_input.aui

【やり方】

① ビデオとVBRMP3音声を用意 
② Utlでビデオを読んだ後、mp3_input.aui経由でVBRMP3を音声読み込み 
③ 再圧縮なしで出力。この時、120fps化してる場合はインターリーブ間隔を3以上に設定。
④ vbrsync.exe にD&D。もしくはコマンドから呼び出し。
⑤ インターリーブ間隔を聞かれるので、設定した値を入力Enter。
⑥ 再生して確認。


【既知の問題】

AVI2.0だとWMPでシークできなくなる。（RIFF-AVIチャンクのみは可）
MPCとか他の自前でAVIをスプリットするプレイヤなら問題なさげ。


【原理】

AviUtlの音声読み込みは、各ビデオフレームごとにバイト単位（サンプル単位）で要求され、
入力プラグインは通常、ファイル中から指定された位置を切り出してUtlに渡す。VBR音声の
場合、ファイル内の位置と再生時間が一致しないため、音ズレが起こる。
一方mp3_input.auiは、指定された位置を無視して時間的に対応するMP3フレームを渡す。
このため読み込みの時点では音ズレが起こらなくなる。
これをそのまま再圧縮無しで出力すると、AviUtlは渡された分のみをwbチャンクに詰めて
AVIファイルに格納する。その結果、AVIファイル内でのwbチャンクとビデオは同期している
ことになる。
しかし、このまま再生しても同期されない。なぜならAVIのヘッダ情報にサンプルサイズと
サンプルレートが記されており、その情報を元に再生時間が決定されているためだ。
既にwbチャンク単位で同期が取られているので、このサンプルサイズとサンプルレートを
wbチャンク単位になるように書き換えるとなんと同期が取れたではありませんか。


【Nandub hackとの違い】

VBR音声の同期方法としてはNandoの方法が使われている。この方法では、wbチャンクに
一定数の音声パケット（MP3の場合MP3フレーム）を入れる。音声パケットに含まれる
デコード後の音声サンプル数が一定であれば、wbチャンクの継続時間は一定となり、
wbチャンク単位で音声を扱わせることで同期が取れる。
しかし、音声パケットに含まれるサンプル数が変動する形式（Vorbis）はこの方法が
使えない。
今回の新方式では、そもそもwbチャンクに含まれるパケット数から一定していないので、
含まれるサンプル数は一定でない。したがってVorbisのような形式であっても問題なく
扱える可能性が高い。
これに付随して、新方式には欠点もある。含まれるサンプル数が一定でないので、
再生時の同期は完全ではないかもしれない。しかし、ビデオ1フレーム単位での同期が
取られているので、誤差は1フレーム未満となる。このズレは実質問題になることは
ないはずだ。

